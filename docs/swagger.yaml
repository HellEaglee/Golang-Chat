basePath: /v1
definitions:
  httphandler.authRequest:
    properties:
      email:
        example: test@example.com
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  httphandler.authResponse:
    properties:
      message:
        type: string
    type: object
  httphandler.createUserRequest:
    properties:
      email:
        example: john@gmail.com
        type: string
      password:
        example: "12345678"
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  httphandler.errorResponse:
    properties:
      messages:
        example:
        - Error message 1
        - ' Error message 2'
        items:
          type: string
        type: array
      success:
        example: false
        type: boolean
    type: object
  httphandler.meta:
    properties:
      limit:
        example: 10
        type: integer
      skip:
        example: 0
        type: integer
      total:
        example: 100
        type: integer
    type: object
  httphandler.response:
    properties:
      data: {}
      message:
        example: Success
        type: string
      success:
        example: true
        type: boolean
    type: object
  httphandler.updateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - name
    type: object
  httphandler.userResponse:
    properties:
      created_at:
        example: "1970-01-01T00:00:00Z"
        type: string
      email:
        example: john@gmail.com
        type: string
      id:
        example: 3342a227-1f2d-4422-a718-435c6a115f62
        type: string
      name:
        example: John
        type: string
      updated_at:
        example: "1970-01-01T00:00:00Z"
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a chat application API with cookie-based authentication.
  termsOfService: http://swagger.io/terms/
  title: Golang Chat API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs in a registered user and returns cookies if the credentials
        are valid.
      parameters:
      - description: Login request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httphandler.authRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/httphandler.authResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
      summary: Login and get cookies
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logs out a registered user and returns access/refresh tokens if
        the credentials are valid.
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/httphandler.authResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
      summary: Logout
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a user and returns an access token if the credentials
        are valid.
      parameters:
      - description: Register request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/httphandler.authRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Register successful
          schema:
            $ref: '#/definitions/httphandler.authResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
      summary: Register and get an access token
      tags:
      - Auth
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users
      parameters:
      - description: Number of items to skip
        example: 0
        in: query
        name: skip
        required: true
        type: integer
      - description: Number of items to take
        example: 5
        in: query
        minimum: 1
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users displayed
          schema:
            $ref: '#/definitions/httphandler.meta'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
      summary: List users with pagination
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: Create user request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/httphandler.createUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created
          schema:
            $ref: '#/definitions/httphandler.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "409":
          description: Data conflict error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an user by id
      parameters:
      - description: Post ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            $ref: '#/definitions/httphandler.response'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a single user by its UUID
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User found
          schema:
            $ref: '#/definitions/httphandler.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
      summary: Get a user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update an existing user by ID
      parameters:
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/httphandler.updateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            $ref: '#/definitions/httphandler.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "401":
          description: Unauthorized error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "403":
          description: Forbidden error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
      summary: Update an user
      tags:
      - Users
  /users/profile:
    get:
      consumes:
      - application/json
      description: Get profile data by its UUID
      produces:
      - application/json
      responses:
        "200":
          description: Profile found
          schema:
            $ref: '#/definitions/httphandler.userResponse'
        "400":
          description: Validation error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "404":
          description: Data not found error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httphandler.errorResponse'
      summary: Get profile data by ID
      tags:
      - Users
securityDefinitions:
  CookieAuth:
    description: Authentication is handled via httpOnly cookies. Login to set cookies
      automatically.
    in: cookie
    name: access_token
    type: apiKey
swagger: "2.0"
